/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package front;

import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import objects.Euler;

/**
 *
 * @author heftyn
 */
public class PopUpEuler extends javax.swing.JFrame {

    private List<Euler> listaEuler;
    private EulerTableModel eulerTM;
    private JTable tablaEuler;
    /**
     * Creates new form PopUpEuler
     */
    public PopUpEuler() {
        initComponents();
        setearTabla();
    }

    private void setearTabla()
    {
        tablaEuler = new JTable();
        scpEuler.setViewportView(tablaEuler);
        eulerTM = new EulerTableModel();
        tablaEuler.setModel(eulerTM);
    }
    
    void setEuler(List<Euler> euler)
    {
        this.listaEuler = euler;
        eulerTM.fireTableDataChanged();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpEuler = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Euler");
        setAlwaysOnTop(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpEuler, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpEuler, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scpEuler;
    // End of variables declaration//GEN-END:variables

    private class EulerTableModel extends DefaultTableModel 
    {
        @Override
        public Object getValueAt(int row, int col) 
        {
            switch (col)
            {
                case 0:
                {
                    return listaEuler.get(row).getTiempoActual();
                }
                case 1:
                {
                    return listaEuler.get(row).get_A_CantidadArchivosRestantesActuales();
                }
                case 2:
                {
                    return listaEuler.get(row).getDerivada();
                }
                case 3:
                {
                    return listaEuler.get(row).getTiempoSiguiente();
                }
                case 4:
                {
                    return listaEuler.get(row).get_A_sigiente();
                }
            }
            return null;
        }
        
          
        @Override
        public int getRowCount() 
        {
            return listaEuler != null ? listaEuler.size() : 0;
        }
                
        @Override
        public int getColumnCount() 
        {
            return 5;
        }
        
        @Override
        public String getColumnName(int columnIndex) 
        {
            String colName ="";
            switch (columnIndex)
            {
                case 0:
                {
                    colName = "t (tiempo actual)";
                    break;
                }
                case 1:
                {
                    colName = "A (Cantidad de archivos faltantes)";
                    break;
                }
                case 2:
                {
                    colName = "dA/dt Derivada";
                    break;
                }
                case 3:
                {
                    colName = "t+1 (tiempo siguiente)";
                    break;
                }
                case 4:
                {
                    colName = "A(t+1) (Archivos faltantes siguientes)";
                    break;
                }
            }
            return colName;
        }
        
        @Override
        public Class<?> getColumnClass(int columnIndex) 
        {
            return Double.class;
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }
}
